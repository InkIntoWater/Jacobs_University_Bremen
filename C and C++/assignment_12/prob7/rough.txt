#include <iostream>
using namespace std;
#include "Area.h"
#include "Circle.h"
#include "Ring.h"
#include "Rectangle.h"
#include "Square.h"
#include <time.h>

const int num_obj = 25;

/*const char *randShape()
{
	const char *Shape[] = {"circle", "ring", "rectangle", "square"};
	int randomNums;
	randomNums = rand() % 4;
	return Shape[randomNums];
}*/

const char *randColour()
{
	const char *Colour[] = {"RED", "BLACK", "VIOLET", "BLUE"};
	int randomNumc;
	randomNumc = rand() % 4;
	return Colour[randomNumc];
}

/*const char *randNumber()
{
	srand(time(NULL));
	int num = rand() % 100 + 5;
	return num;
}*/

int main()
{
	Area *list[num_obj]; // creating an object with pointer
	int counter = 0;
	srand(static_cast<unsigned int>(time(0)));

	//loop to create random objects with random parameters
	while (counter < num_obj)
	{
		const char *color = randColour();
		double num_a = rand() % 100 + 5;
		double num_b = rand() % 100 + 5;
		int randobj = rand() % 4;
		switch (randobj)
		{
		case 0:
			list[counter] = new Rectangle(color, num_a, num_b);
			break;
		case 1:
			list[counter] = new Square(color, num_a);
			break;
		case 2:
			list[counter] = new Circle(color, num_a);
			break;
		case 3:
			//swapping values if the outside radius is smaller than the inside radius

			if (num_a < num_b)
			{
				double temp = num_a;
				num_a = num_b;
				num_b = temp;
			}
			list[counter] = new Ring(color, num_a, num_b);
			break;
		}
		counter++;
	}
	//char[] = {Circle, Ring, Rectangle, Square};
	//for (int i = 0; i < num_obj; i++)
	//{
	//	srand(time(NULL)); //initialize the random seed

	//	const char array_shapes[4] = {Circle, Ring, Rectangle, Square};
	//	int RandIndex = rand() % 4; //generates a random number between 0 and 3
	//	cout << array_shapes[RandIndex];
	//}

	//Area *list[num_obj];   /* creating an object with pointer
	//							array from the class Area*/
	//int index = 0;		   // setting the intex by initializing it
	double sum_area = 0.0; // Initializing the value of sum of area/
	double sum_perimeter = 0.0;
	//cout << "Creating Ring: ";
	//Ring blue_ring("BLUE", 5, 2); //Declaring a constructor for a blue ring
	//cout << "Creating Circle: ";
	//Circle yellow_circle("YELLOW", 7);
	//cout << "Creating Rectangle: ";
	//Rectangle green_rectangle("GREEN", 5, 6);
	//cout << "Creating Circle: ";
	//Circle red_circle("RED", 8);
	//cout << "Creating Rectangle: ";
	//Rectangle black_rectangle("BLACK", 10, 20);
	//cout << "Creating Ring: ";
	//Ring violet_ring("VIOLET", 100, 5);

	//	cout << "Creating Square: ";
	//	Square white_square("White", 5);
	//
	//	list[0] = &blue_ring; /*initializing the list by setting first index of
	//								  the list to blue ring*/
	//	list[1] = &yellow_circle;
	//	list[2] = &green_rectangle;
	//	list[3] = &red_circle;
	//	list[4] = &black_rectangle;
	//	list[5] = &violet_ring;
	//	list[6] = &white_square;
	int indexa = 0;
	while (indexa < num_obj)
	{ // creating a loop for going through every object in the list
		(list[indexa])->getColor();
		double area = list[indexa++]->calcArea(); /* calculating the area of 
													every object in the list*/
		sum_area += area;
	}

	int indexp = 0;
	while (indexp < num_obj)
	{
		(list[indexp])->getColor();
		double perimeter = list[indexp++]->calcPerimeter(); // calculating the perimeter of
															//every object in the list*/
		sum_perimeter += perimeter;
	}
	cout << "\nThe total area is "
		 << sum_area << " units " << endl; // printing the total sum of the areas

	cout << "\nThe total perimeter is "
		 << sum_perimeter << " units " << endl; // printing the total sum of the perimeters

	return 0;
}

/*
                       ****** Relation between the classes ******
				========================================================

                                  +------------+
                                  |   Area     |
                                  +-----+------+
                                        |
                                        |
                                        |
                       +----------------+------------------+
                       |                                   |
                       |                                   |
                       |                                   |
                +-------------+                   +----------------+
                |             |                   |                |
                |   circle    |                   |    rectancle   |
                |             |                   |                |
                +-----+-------+                   +----------------+
                      |
                      |
               +--------------+
               |              |
               |    Ring      |
               |              |
               +--------------+
*/